
from flask import Flask, render_template, request, jsonify
import networkx as nx
import random
from colorama import Fore, Back, Style, init

app = Flask(__name__)

init()  # Para Colorama

############################################################################
# Funciones para hacer la digr√°fica mas est√©tica y ejemplificar la generaci√≥n de texto
############################################################################

def Color(texto):
    color = ''
    if texto in QN:
        color = 'qn'
    elif texto in UnoAbs:
        color = 'uno'
    elif texto in DosAbs:
        color = 'dos'
    return color

############################################################################
# Creaci√≥n de la digr√°fica de co-ocurrencia
############################################################################

def SepararTexto(texto):
    palabra = []
    x = ''

    for letra in texto:
        if letra == " ":
            x += letra
        else:
            if x and x[-1] == " ":
                palabra.append(x)
                x = ""
            x += letra

    if x:
        palabra.append(x)

    palabra[-1] += ' '

    return palabra

def DiGraCo(A):
    Aa = [SepararTexto(A[i]) for i in range(len(A))]

    G = nx.DiGraph()

    for i in range(len(A)):
        for j in range(len(Aa[i]) - 1):
            G.add_edge(Aa[i][j], Aa[i][j + 1])

    return G

A = [
    "Un gato ve un gato.", 
    "Vi un gato. Es naranja.",
    "Es raro ver el color naranja. Excepto en un gato.",
    "Un conjunto es una colecci√≥n bien definida de objetos distintos.",
    "Dos conjuntos son iguales si tienen exactamente los mismos elementos.",
    "El conjunto vac√≠o no contiene ning√∫n elemento.",
    "La uni√≥n de dos conjuntos contiene todos los elementos que pertenecen a al menos uno de ellos.",
    "La intersecci√≥n de dos conjuntos contiene solo los elementos que est√°n en ambos.",
    "La diferencia de conjuntos A y B contiene los elementos que est√°n en A pero no en B.",
    "Un conjunto A es subconjunto de B si todo elemento de A tambi√©n est√° en B.",
    "La relaci√≥n de pertenencia se denota por el s√≠mbolo ‚àà.",
    "El conjunto de las partes de A, denotado ùí´(A), contiene todos los subconjuntos de A.",
    "El producto cartesiano de A y B es el conjunto de todos los pares ordenados (a, b) con a ‚àà A y b ‚àà B.",
    "Un conjunto puede ser finito, infinito numerable o no numerable.",
    "El conjunto de los n√∫meros naturales es un conjunto infinito numerable.",
    "El conjunto de los n√∫meros reales no es numerable.",
    "Georg Cantor fue el pionero de la teor√≠a de conjuntos.",
    "Dos conjuntos tienen la misma cardinalidad si existe una biyecci√≥n entre ellos.",
    "La cardinalidad del conjunto de los n√∫meros naturales es ‚Ñµ‚ÇÄ (aleph-cero).",
    "La paradoja de Russell revela problemas en la teor√≠a ingenua de conjuntos.",
    "La teor√≠a axiom√°tica de conjuntos, como ZFC, evita paradojas mediante restricciones.",
    "Un conjunto puede contener otros conjuntos como elementos.",
    "La notaci√≥n por comprensi√≥n define un conjunto especificando una propiedad.",
    "La uni√≥n disjunta de dos conjuntos considera a sus elementos como distintos incluso si son iguales.",
    "El principio del conjunto extensional dice que los conjuntos est√°n determinados por sus elementos.",
    "El conjunto universal no existe en ZFC para evitar contradicciones.",
    "El axioma de elecci√≥n permite seleccionar un elemento de cada conjunto en una colecci√≥n arbitraria.",
    "El lema de Zorn es equivalente al axioma de elecci√≥n.",
    "La funci√≥n caracter√≠stica de un subconjunto A de X es una funci√≥n de X en {0,1}.",
    "Un conjunto finito tiene una cantidad exacta de elementos que puede contarse.",
    "El conjunto de las funciones de A en B es denotado B^A.",
    "La intersecci√≥n arbitraria de conjuntos puede ser vac√≠a.",
    "La teor√≠a de conjuntos es el lenguaje fundacional de las matem√°ticas.",
    "Las relaciones binarias se definen como subconjuntos del producto cartesiano.",
    "Una relaci√≥n de equivalencia es reflexiva, sim√©trica y transitiva.",
    "Una partici√≥n de un conjunto est√° asociada a una relaci√≥n de equivalencia.",
    "Un conjunto parcialmente ordenado tiene una relaci√≥n de orden parcial.",
    "Las clases propias son colecciones que no pueden ser conjuntos en ZFC.",
    "Un conjunto inductivo contiene al 0 y es cerrado bajo sucesi√≥n.",
    "El axioma del infinito garantiza la existencia de un conjunto infinito.",
    "Las operaciones con conjuntos siguen leyes como la distributiva, conmutativa y asociativa.",
    "El diagrama de Venn representa gr√°ficamente relaciones entre conjuntos.",
    "Los ordinales extienden el concepto de posici√≥n m√°s all√° de lo finito.",
    "Una topolog√≠a sobre un conjunto X es una colecci√≥n de subconjuntos abiertos que contiene a X y al vac√≠o y es cerrada bajo uniones arbitrarias e intersecciones finitas.",
    "Un conjunto abierto depende de la topolog√≠a elegida.",
    "Un espacio topol√≥gico es un par (X, œÑ), donde œÑ es una topolog√≠a sobre X.",
    "La topolog√≠a discreta es aquella donde todos los subconjuntos son abiertos.",
    "La topolog√≠a trivial solo contiene a X y al conjunto vac√≠o.",
    "Un conjunto cerrado es aquel cuyo complemento es abierto.",
    "Un espacio es conexo si no puede dividirse en dos abiertos disjuntos no vac√≠os.",
    "Un espacio es compacto si toda cubierta abierta tiene un subcubrimiento finito.",
    "En ‚Ñù, los intervalos abiertos son conjuntos abiertos.",
    "El cierre de un conjunto es el menor cerrado que lo contiene.",
    "El interior de un conjunto es el mayor abierto contenido en √©l.",
    "La frontera de un conjunto es el conjunto de puntos adherentes que no est√°n en su interior.",
    "Un punto de acumulaci√≥n de A es uno tal que toda vecindad suya intersecta A en alg√∫n punto distinto.",
    "Una base de topolog√≠a es una colecci√≥n de abiertos que generan todos los dem√°s.",
    "El espacio ‚Ñù‚Åø con la topolog√≠a euclidiana es uno de los ejemplos fundamentales.",
    "La continuidad se define en t√©rminos de la preimagen de abiertos.",
    "Un homeomorfismo es una funci√≥n continua, biyectiva, con inversa continua.",
    "Dos espacios son topol√≥gicamente equivalentes si existe un homeomorfismo entre ellos.",
    "La topolog√≠a del orden es generada por intervalos abiertos de la forma (a, b).",
    "La m√©trica induce una topolog√≠a en un espacio m√©trico.",
    "Un espacio es Hausdorff si todo par de puntos distintos tiene vecindades disjuntas.",
    "La topolog√≠a cociente resulta de identificar puntos seg√∫n una relaci√≥n de equivalencia.",
    "La topolog√≠a producto de dos espacios topol√≥gicos se construye con bases formadas por productos de abiertos.",
    "El teorema de Tychonoff dice que el producto arbitrario de espacios compactos es compacto.",
    "Un espacio de Alexandrov tiene cerraduras finitas bajo intersecci√≥n.",
    "La convergencia de sucesiones puede variar seg√∫n la topolog√≠a del espacio.",
    "El conjunto de funciones continuas entre dos espacios forma un objeto de estudio en topolog√≠a funcional.",
    "La separaci√≥n de conjuntos mediante funciones continuas caracteriza ciertas propiedades del espacio.",
    "El lema de Urysohn caracteriza los espacios normales.",
    "La propiedad de Lindel√∂f indica que toda cubierta abierta tiene un subcubrimiento numerable.",
    "La topolog√≠a fina es la m√°s grande que hace continua a una familia dada de funciones.",
    "Los espacios conexos por caminos generalizan la idea de ‚Äúcamino entre puntos‚Äù.",
    "Un retracto es un subconjunto con una funci√≥n de retracci√≥n continua.",
    "La topolog√≠a es fundamental en el estudio de variedades y geometr√≠a diferencial.",
    "El teorema de Brouwer establece que toda funci√≥n continua de un disco cerrado en s√≠ mismo tiene un punto fijo.",
    "Una categor√≠a consiste en objetos y morfismos entre ellos, con composici√≥n asociativa y morfismos identidad.",
    "Los conjuntos y funciones forman una categor√≠a llamada Set.",
    "En la categor√≠a Top, los objetos son espacios topol√≥gicos y los morfismos son funciones continuas.",
    "Un morfismo que tiene inverso es un isomorfismo.",
    "Un funtor es una funci√≥n entre categor√≠as que preserva estructuras.",
    "Los funtores covariantes preservan la direcci√≥n de los morfismos.",
    "Los funtores contravariantes invierten la direcci√≥n de los morfismos.",
    "Una transformaci√≥n natural es una manera de comparar dos funtores entre las mismas categor√≠as.",
    "Dos categor√≠as son equivalentes si hay funtor y transformaci√≥n natural que lo demuestran.",
    "El producto categ√≥rico generaliza el producto cartesiano de conjuntos.",
    "Un objeto inicial tiene un √∫nico morfismo hacia cualquier otro objeto.",
    "Un objeto final recibe un √∫nico morfismo desde cualquier objeto.",
    "Un l√≠mite en una categor√≠a generaliza conceptos como productos e intersecciones.",
    "Un col√≠mite generaliza uniones y sumas directas.",
    "El adjunto de un funtor es otro funtor que establece una biyecci√≥n natural entre ciertos conjuntos de morfismos.",
    "La categor√≠a opuesta de C invierte la direcci√≥n de todos sus morfismos.",
    "Un pullback es un tipo de l√≠mite que generaliza la intersecci√≥n de conjuntos con funci√≥n com√∫n.",
    "Un pushout es un tipo de col√≠mite que generaliza la uni√≥n disjunta con identificaci√≥n.",
    "El Yoneda Lemma relaciona objetos con representaciones v√≠a conjuntos de morfismos.",
    "Todo funtor representable est√° determinado por el Yoneda embedding.",
    "Una categor√≠a se dice abeliana si tiene estructura suficiente para estudiar homolog√≠a.",
    "Las categor√≠as enriquecidas tienen hom-sets con estructura adicional, como espacio vectorial o topolog√≠a.",
    "Los diagramas conmutativos permiten visualizar condiciones en categor√≠as.",
    "La teor√≠a de categor√≠as proporciona un lenguaje unificador para muchas ramas de las matem√°ticas.",
    "Muchos conceptos algebraicos pueden reformularse categ√≥ricamente, como los grupos, anillos y m√≥dulos."
]  # Esto es b√°sicamente la base de datos.

G = DiGraCo(A)

############################################################################
# Funciones para calcular quasi-n√∫cleo
############################################################################

nodes = list(G.nodes())

def ConjIndMax(DiGra):
    con = set()
    nodos = list(DiGra.nodes())

    while nodos:
        node = nodos.pop()
        con.add(node)
        nodos = [
            n for n in nodos if not (n in DiGra[node] or node in DiGra[n])
        ]

    return con

def PropDosAbs(G, S):
    for nodo in set(G.nodes) - S:
        if all(
                nx.shortest_path_length(G, nodo, s) > 2 for s in S
                if nx.has_path(G, nodo, s)):
            return False
    return True

def QuasiNucleo(G):
    S = ConjIndMax(G)
    while not PropDosAbs(G, S):
        S = ConjIndMax(G)
    return S

############################################################################
# Calcular un quasi-nucleo de la sub-digrafica
############################################################################

NodosEliminar = []

def SubDiGra(G):
    Nodos = list(reversed(nodes))

    H = G.copy()

    for n in range(0, len(nodes) - 5):
        v = Nodos[n]
        Pred_v = G.predecessors(v)

        H_nodes = list(H.nodes())

        if v in H_nodes:
            NodosEliminar.append(v)
            H.remove_node(v)
            H.remove_nodes_from(Pred_v)

    return H

H = SubDiGra(G)

QN = set()

if not len(H) == 0:
    if nx.is_weakly_connected(H):
        QN = QuasiNucleo(H)
    else:
        for C in nx.weakly_connected_components(H):
            QN.update(QuasiNucleo(H.subgraph(list(C))))

############################################################################
# Completar el quasi-n√∫cleo
############################################################################

Invertir_NodosEliminar = list(reversed(NodosEliminar))

for n in range(0, len(NodosEliminar)):

    QN_copy = QN.copy()

    if any(
            G.has_edge(Invertir_NodosEliminar[n], s)
            or G.has_edge(s, Invertir_NodosEliminar[n]) for s in QN_copy):
        continue
    else:
        QN.add(Invertir_NodosEliminar[n])

UnoAbs = set(v for v in set(G.nodes - QN) if any(
    nx.shortest_path_length(G, v, s) == 1 for s in QN if nx.has_path(G, v, s)))

DosAbs = set(v for v in set(G.nodes - QN - UnoAbs) if any(
    nx.shortest_path_length(G, v, s) == 2 for s in QN if nx.has_path(G, v, s)))

def SigNodo(Nodo1, QNucleo, DiGra):
    if Nodo1 in QNucleo:
        Vecinos = [
            vecino for vecino in DiGra[Nodo1]
            if vecino not in QNucleo and set(Nodo1)
        ]
        if Vecinos:
            return random.choice(Vecinos)
    elif Nodo1 in UnoAbs:
        Vecinos = [vecino for vecino in DiGra[Nodo1] if vecino in QNucleo]
        if Vecinos:
            return random.choice(Vecinos)
    elif Nodo1 in DosAbs:
        Vecinos = [vecino for vecino in DiGra[Nodo1] if vecino in UnoAbs]
        if Vecinos:
            return random.choice(Vecinos)
    return None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate', methods=['POST'])
def generate_text():
    texto_input = request.json.get('text', '')
    
    if not texto_input:
        return jsonify({'response': 'Por favor ingresa un texto.'})
    
    B = [texto_input]
    Bb = SepararTexto(B[0])
    UltNodo = Bb[-1]
    
    Continuator = [{'text': B[0] + ' ', 'color': 'input'}]
    
    for _ in range(50):
        next_node = SigNodo(UltNodo, QN, G)
        if next_node is None:
            break
        elif "." == next_node or "?" in next_node or "!" in next_node:
            Continuator.append({'text': next_node, 'color': Color(next_node)})
            UltNodo = next_node
            break
        
        Continuator.append({'text': next_node, 'color': Color(next_node)})
        UltNodo = next_node
    
    if len(Continuator) <= 1:
        return jsonify({'response': [{'text': 'Perd√≥n no se como responder.', 'color': 'error'}]})
    else:
        return jsonify({'response': Continuator})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
